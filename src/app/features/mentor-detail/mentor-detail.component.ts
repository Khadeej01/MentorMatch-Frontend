import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { MentorService } from '../../data/mentor.service';
import { Mentor } from '../../domain/mentor.model';
import { BookingService } from '../../data/booking.service';
import { AuthService } from '../../core/auth/auth.service';

@Component({
  selector: 'app-mentor-detail',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './mentor-detail.component.html',
  styleUrls: ['./mentor-detail.component.css']
})
export class MentorDetailComponent implements OnInit {
  mentor: Mentor | undefined;
  loading: boolean = true;
  error: string | null = null;
  selectedDate: string = '';
  selectedTime: string = '';
  bookingSuccess: boolean = false;
  bookingError: string | null = null;

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private mentorService: MentorService,
    private bookingService: BookingService,
    private authService: AuthService
  ) { }

  ngOnInit(): void {
    const id = this.route.snapshot.paramMap.get('id');
    if (id) {
      this.mentorService.getMentorById(id).subscribe({
        next: (data) => {
          this.mentor = data;
          this.loading = false;
        },
        error: (err) => {
          this.error = 'Failed to load mentor details.';
          this.loading = false;
          console.error(err);
        }
      });
    }
  }

  bookSession(): void {
    this.bookingSuccess = false;
    this.bookingError = null;

    if (!this.selectedDate || !this.selectedTime) {
      this.bookingError = 'Please select a date and time.';
      return;
    }

    const currentUser = this.authService.getAuthData()?.user;
    if (!currentUser || currentUser.role !== 'learner') {
      this.bookingError = 'You must be logged in as a learner to book a session.';
      return;
    }

    if (!this.mentor) {
      this.bookingError = 'Mentor not found.';
      return;
    }

    const newBooking = {
      id: '', // Will be generated by service
      mentorId: this.mentor.id,
      learnerId: currentUser.id,
      date: this.selectedDate,
      time: this.selectedTime,
      status: 'pending'
    };

    this.bookingService.createBooking(newBooking).subscribe({
      next: () => {
        this.bookingSuccess = true;
        this.selectedDate = '';
        this.selectedTime = '';
      },
      error: (err) => {
        this.bookingError = 'Failed to book session. Please try again.';
        console.error(err);
      }
    });
  }
}
